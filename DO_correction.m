strGliderName = 'Ramses';
strDeploymentNumber = '6';


%% PREP CTD DATA
% load CTD data from existing mat file...

ctd = load('Ramses_Deployment6_CTD_L1.mat');
do = load('Ramses_Deployment6_DO_L1.mat');
length(ctd.ptime)

% Plot originals e.g. comparing internal and external temperatures, before doing any resampling, filtering, delay, etc. [SBL]
% convert original ptime (from CTD) into datenum style
ptime_datenum_CTD = (ctd.ptime/3600/24) + datenum(1970, 1, 1, 0, 0, 0);
% title_String = sprintf('%s %s %s',strGliderName, 'Deployment', strDeploymentNumber);
% legend_String1 = sprintf('%s %s %s','T CTD without interp, without delay');
% figure; plot(ptime_datenum_CTD,ctd.temp,'bo',do.ptime_datenum,do.oxyw_temp,'ro'); legend(legend_String1,'oxyw temp'); title(title_String)
% datetick('x',7,'keeplimits');
% figure; plot(do.ptime_datenum,do.oxyw_dphase,'ro'); title(title_String); ylabel('dphase');
% datetick('x',7,'keeplimits')

% Sample CTD data at a regular interval [SBL]
% (This step is needed because we need to filter the CTD Data, below.)
my_SampleInterval_Secs = 3;
ptime_Regular = ctd.ptime(1):my_SampleInterval_Secs:ctd.ptime(end);
temp_Regular = interp1(ctd.ptime,ctd.temp,ptime_Regular);
salin_Regular = interp1(ctd.ptime,ctd.salinCorrected,ptime_Regular);
dens_Regular = interp1(ctd.ptime,ctd.densCorrected,ptime_Regular);
depth_Regular = interp1(ctd.ptime,ctd.depth,ptime_Regular); 
gpsLat_Regular = interp1(ctd.ptime,ctd.gpsLat,ptime_Regular); 
gpsLon_Regular = interp1(ctd.ptime,ctd.gpsLon,ptime_Regular); 

median_Ts_Original = median(diff(ctd.ptime));
display_String = sprintf('%s %s','Median of original sample intervals of CTD data =',num2str(median_Ts_Original));
figure; histogram(log10(diff(ctd.ptime)),25); title('log10 of original sample intervals from CTD data');
figure; plot(log10(diff(ctd.ptime))); title('log10 of original sample intervals from CTD data');
figure; plot(log10(diff(ptime_Regular))); title('log10 of new regular sample intervals from CTD data, after resampling');

% Filter the regularly sampled CTD Data (T,S) before using it [SBL]
Tc_Minutes = 0.5;
Tc_Secs = Tc_Minutes*60;
Fc_Samples_Per_Sec = 1/Tc_Secs;
Fs = 1/my_SampleInterval_Secs;
Fc_Normalized = Fc_Samples_Per_Sec/(Fs/2);
[b,a] = butter(4,Fc_Normalized,'low');
[H,F] = freqz(b,a,100,Fs);
temp_Filtered = filtfilt(b,a,temp_Regular);
salin_Filtered = filtfilt(b,a,salin_Regular);  
dens_Filtered = filtfilt(b,a,dens_Regular); 

% Delay CTD Data
my_Delay_Secs = 27;
ptime_Regular = ptime_Regular + my_Delay_Secs;


%% INTEGRATE WITH CTD DATA
% interpolate regular, delayed CTD to irregular times of DO sensor [SBL]
tempi = interp1(ptime_Regular,temp_Filtered,do.ptime);
salini = interp1(ptime_Regular,salin_Filtered,do.ptime);
densi = interp1(ptime_Regular,dens_Filtered,do.ptime);
depthi = interp1(ptime_Regular,depth_Regular,do.ptime);
gpsLati = interp1(ptime_Regular,gpsLat_Regular,do.ptime);
gpsLoni = interp1(ptime_Regular,gpsLon_Regular,do.ptime);

%% TSP CORRECTIONS
% first, implement temperature-dependent correction to DO concentration
% that utilizes dphase as the input (manual page 30), coefficients from cal
% sheets (a 5x4 matrix of values) and will be glider (and foil) dependent.
% C0 = C0coef(1) + (C0coef(2) .* tempi) + ...
%     (C0coef(3) .* (tempi.^2)) + (C0coef(4) .* (tempi.^3));
% C1 = C1coef(1) + (C1coef(2) .* tempi) + ...
%     (C1coef(3) .* (tempi.^2)) + (C1coef(4) .* (tempi.^3));
% C2 = C2coef(1) + (C2coef(2) .* tempi) + ...
%     (C2coef(3) .* (tempi.^2)) + (C2coef(4) .* (tempi.^3));
% C3 = C3coef(1) + (C3coef(2) .* tempi) + ...
%     (C3coef(3) .* (tempi.^2)) + (C3coef(4) .* (tempi.^3));
% C4 = C4coef(1) + (C4coef(2) .* tempi) + ...
%     (C4coef(3) .* (tempi.^2)) + (C4coef(4) .* (tempi.^3));

o2_tcorr = do.oxyw_oxygen;

% second, implement the salinity correction to DO concentration (page 31)
% ASSUMES DEFAULT SALINITY IN SENSOR WAS SET TO ZERO, OTHERWISE ANOHTER
% SCALING IS REQUIRED
B0=-6.24097e-3;
B1=-6.93498e-3;
B2=-6.90358e-3;
B3=-4.29155e-3;
C0=-3.11680e-7;

Ts = log((298.15 - tempi) ./ (273.15 + tempi));

o2_tscorr = o2_tcorr .* ...
    exp((salini .* (B0 + (B1 .* Ts) + (B2 .* (Ts.^2)) + ...
                    (B3 .* (Ts.^3))))  + ...
    (C0 .* (salini.^2)));

% third, implement the pressure correction to DO concentration (page 32)
o2_tspcorr = o2_tscorr .* (1 + (0.04 .* depthi ./ 1000));

%% CALC SATURATION
% use polynomial to calculate DO saturations using the measured temp and
% sal (manual page 30)
A0 = 2.00856;
A1 = 3.22400;
A2 = 3.99063;
A3 = 4.80299;
A4 = 9.78188e-1;
A5 = 1.71069;
B0 = -6.24097e-3;
B1 = -6.93498e-3;
B2 = -6.90358e-3;
B3 = -4.29155e-3;
C0 = -3.11680e-7;

% need interpolated temp, salinity, pressure at times of DO obs
rslt = (A0 + (A1 .* Ts) + (A2 .* (Ts.^2)) + (A3 .* (Ts.^3)) + ...
       (A4 .* (Ts.^4)) + (A5 .* (Ts.^5))) + ...
    (salini .* (B0 + (B1 .* Ts) + (B2 .* (Ts.^2)) + (B3 .*(Ts.^3)))) + ...
    (C0 .* (salini.^2));

o2_sol = exp(rslt);

o2_sat = (o2_tspcorr .* 2.2414) ./ o2_sol;
% Check hist of o2_sat [SBL]
    titleString = sprintf('%s %s %s','02 Saturation for',strGliderName,strDeploymentNumber);
    figure; histogram(o2_sat); title(titleString); xlabel('Percent Saturation')
    titleString = sprintf('%s %s %s','02 Saturation vs External Temperature for',strGliderName,strDeploymentNumber);
    %figure; scatter(tempi,o2_sat,'bo'); title(titleString); xlabel('degrees C'); ylabel('Percent Saturation');
    %titleString = sprintf('%s %s %s','TSP 02 vs External Temperature for',strGliderName,strDeploymentNumber);
    %figure; scatter(tempi,o2_tspcorr,'bo'); title(titleString); xlabel('degrees C'); ylabel('10e-6 mol/dm3');


%% PREP OUTPUT
% create configuration struct...
units = struct( ...
    'gpsLati', 'decimal degrees',...
    'gpsLoni', 'decimal degrees',...
    'ptime', 'seconds since 0000-01-01T00:00', ...
    'ptime_datenum', 'days since 1970-01-01T00:00', ...
    'depthi', 'meters', ...
    'oxyw_oxygen', '10e-6 mol/dm3', ...
    'oxyw_saturation', 'percent', ...
    'oxyw_temp', 'degrees C', ...
    'oxyw_dphase', 'degrees', ...
    ... % 'oxyw_bphase', 'degrees', ...
    ... % 'oxyw_rphase', 'degrees', ...
    ... % 'oxyw_bamp', 'mA', ...
    ... % 'oxyw_bpot', 'mV', ...
    ... % 'oxyw_ramp', 'mA', ...
    ... % 'oxyw_rawtemp', 'degrees C', ...
    ... % 'oxyw_time', 'timestamp', ...
    ... % 'oxyw_installed', 'bool', ...    
    'tempi', 'degrees C', ...
    'salini', 'psu', ...
    'densi','kg m-3',...  
    'o2_tcorr', '10e-6 mol/dm3', ...
    'o2_tscorr', '10e-6 mol/dm3', ...
    'o2_tspcorr', '10e-6 mol/dm3', ...
    'o2_sol', 'cm3/liter at 1031 hPa', ...
    'o2_sat', 'percent');

variable_description = struct( ...
    'gpsLati', 'interpolated Latitude, from CTD dataset',...
    'gpsLoni', 'interpolated Longitude, from CTD dataset',...
    'ptime','ptimeDescrip', ...
    'ptime_datenum', 'ptime in datenum format', ...
    'depthi', 'interpolated CTD depth', ...   
    'oxyw_oxygen', 'dissolved oxygen', ...
    'oxyw_saturation', 'dissolved oxygen saturation', ...
    'oxyw_temp', 'water temperature', ...
    'oxyw_dphase', 'phase difference', ...
    ... % 'oxyw_bphase', 'blue phase', ...
    ... % 'oxyw_rphase', 'red phase', ...
    ... % 'oxyw_bamp', 'blue current bias', ...
    ... % 'oxyw_bpot', 'blue voltage bias', ...
    ... % 'oxyw_ramp', 'red current bias', ...
    ... % 'oxyw_rawtemp', 'raw water temperature', ...
    ... % 'oxyw_time', 'optode timestampe', ...
    ... % 'oxyw_installed', 'bool', ...    
    'tempi', 'filtered, interpolated CTD water temperature', ...
    'salini', 'corrected, filtered, interpolated CTD salinity', ...
    'densi', 'corrected, filtered, interpolated CTD density ',...
    'o2_tcorr', 'temperature corrected dissolved oxygen', ...
    'o2_tscorr', 'temperature and salinity corrected dissolved oxygen', ...
    'o2_tspcorr', 'temperature, salinity, and pressure corrected dissolved oxygen', ...
    'o2_sol', 'corrected oxygen solubility', ...
    'o2_sat', 'corrected oxygen saturation');

% correction_coefficients = struct('C0coef', C0coef, ...
%                                  'C1coef', C1coef, ...
%                                  'C2coef', C2coef, ...
%                                  'C3coef', C3coef, ...
%                                  'C4coef', C4coef);

config = struct('glider_name', strGliderName,...
                'deployment_number', strDeploymentNumber,...               
                'var_descriptions', variable_description,...
                'var_units', units);

% set Level 2 data mat file name..
strMatFileName = strcat(strGliderName, '_DeploymentLag', strDeploymentNumber, '_DO_L1.mat');
ptime = do.ptime;
ptime_datenum = (do.ptime/3600/24) + datenum(1970, 1, 1, 0, 0, 0);
oxyw_oxygen = do.oxyw_oxygen;
oxyw_saturation = do.oxyw_saturation;
oxyw_temp = do.oxyw_temp;
oxyw_dphase = do.oxyw_dphase;
pwd

%% OUTPUT
% save flight data to mat file...
save(strMatFileName,...
'config', ...
'gpsLati', ...
'gpsLoni', ...
'ptime', ...
'ptime_datenum', ...
'depthi', ...
'oxyw_oxygen', ...
'oxyw_saturation', ...
'oxyw_temp', ...
'oxyw_dphase', ...
... % 'oxyw_bphase', ...
... % 'oxyw_rphase', ...
... % 'oxyw_bamp', ...
... % 'oxyw_bpot', ...
... % 'oxyw_ramp', ...
... % 'oxyw_rawtemp', ...
... % 'oxyw_time', ...
... % 'oxyw_installed', ...
'tempi', ...
'salini', ...
'densi',...
'o2_tcorr', ...
'o2_tscorr', ...
'o2_tspcorr', ...
'o2_sol', ...
'o2_sat');